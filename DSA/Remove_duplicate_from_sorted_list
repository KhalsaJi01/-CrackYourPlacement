/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode* first=headA;
        ListNode* second=headB;
        int counter1=0;
        int counter2=0;
        while(first->next!=NULL&&second->next!=NULL)
        {
            first=first->next;
            second=second->next;
        }
        if(first->next!=NULL)
        {
            while(first->next!=NULL)
            {
                 first=first->next;
                 counter1++;
            }
        }
        else if (second->next!=NULL)
        {
             while(second->next!=NULL)
            {
                 second=second->next;
                 counter2++;
                 cout<<counter2;
            }
        }
        first=headA;
        second=headB;
        if(counter1>0)
        {
            while(counter1!=0)
            {
                first=first->next;
                counter1--;
            }
        }
        else if(counter2!=0)
        {
            while(counter2!=0)
            {
                cout<<"hello";
                second=second->next;
                counter2--;
            }
        }
        while(first!=NULL&&second!=NULL)
        {
            if(first==second)
            {
                return first;
            }
            first=first->next;
            second=second->next;
        }
        return NULL;

        
    }
};
